package com.example.a7invensun.verifydemo.greendao.model.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zhongdun.verifydemo.badge.PersonInfoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_INFO_MODEL".
*/
public class PersonInfoModelDao extends AbstractDao<PersonInfoModel, Void> {

    public static final String TABLENAME = "PERSON_INFO_MODEL";

    /**
     * Properties of entity PersonInfoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SignInImage = new Property(0, int.class, "signInImage", false, "SIGN_IN_IMAGE");
        public final static Property IDImage = new Property(1, int.class, "IDImage", false, "IDIMAGE");
        public final static Property Id = new Property(2, Long.class, "id", false, "ID");
        public final static Property ID = new Property(3, String.class, "ID", false, "ID");
        public final static Property EMPLOYEEID = new Property(4, String.class, "EMPLOYEEID", false, "EMPLOYEEID");
        public final static Property SIMILARITY = new Property(5, float.class, "SIMILARITY", false, "SIMILARITY");
        public final static Property ENTRYTIME = new Property(6, String.class, "ENTRYTIME", false, "ENTRYTIME");
        public final static Property DEVICENAME = new Property(7, String.class, "DEVICENAME", false, "DEVICENAME");
        public final static Property DEVICEID = new Property(8, String.class, "DEVICEID", false, "DEVICEID");
        public final static Property CREATETIME = new Property(9, String.class, "CREATETIME", false, "CREATETIME");
        public final static Property NAME = new Property(10, String.class, "NAME", false, "NAME");
        public final static Property SEX = new Property(11, String.class, "SEX", false, "SEX");
        public final static Property BIRTHDAY = new Property(12, String.class, "BIRTHDAY", false, "BIRTHDAY");
        public final static Property NATION = new Property(13, String.class, "NATION", false, "NATION");
        public final static Property DEPARTMENT = new Property(14, String.class, "DEPARTMENT", false, "DEPARTMENT");
        public final static Property ZFSPATH = new Property(15, String.class, "ZFSPATH", false, "ZFSPATH");
        public final static Property ZFSFACEPATH = new Property(16, String.class, "ZFSFACEPATH", false, "ZFSFACEPATH");
        public final static Property NOTE = new Property(17, String.class, "NOTE", false, "NOTE");
        public final static Property DUBIOUS = new Property(18, String.class, "DUBIOUS", false, "DUBIOUS");
        public final static Property REPOID = new Property(19, String.class, "REPOID", false, "REPOID");
        public final static Property IDTODAY = new Property(20, boolean.class, "IDTODAY", false, "IDTODAY");
    }


    public PersonInfoModelDao(DaoConfig config) {
        super(config);
    }
    
    public PersonInfoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_INFO_MODEL\" (" + //
                "\"SIGN_IN_IMAGE\" INTEGER NOT NULL ," + // 0: signInImage
                "\"IDIMAGE\" INTEGER NOT NULL ," + // 1: IDImage
                "\"ID\" INTEGER," + // 2: id
                "\"ID\" TEXT," + // 3: ID
                "\"EMPLOYEEID\" TEXT," + // 4: EMPLOYEEID
                "\"SIMILARITY\" REAL NOT NULL ," + // 5: SIMILARITY
                "\"ENTRYTIME\" TEXT," + // 6: ENTRYTIME
                "\"DEVICENAME\" TEXT," + // 7: DEVICENAME
                "\"DEVICEID\" TEXT," + // 8: DEVICEID
                "\"CREATETIME\" TEXT," + // 9: CREATETIME
                "\"NAME\" TEXT," + // 10: NAME
                "\"SEX\" TEXT," + // 11: SEX
                "\"BIRTHDAY\" TEXT," + // 12: BIRTHDAY
                "\"NATION\" TEXT," + // 13: NATION
                "\"DEPARTMENT\" TEXT," + // 14: DEPARTMENT
                "\"ZFSPATH\" TEXT," + // 15: ZFSPATH
                "\"ZFSFACEPATH\" TEXT," + // 16: ZFSFACEPATH
                "\"NOTE\" TEXT," + // 17: NOTE
                "\"DUBIOUS\" TEXT," + // 18: DUBIOUS
                "\"REPOID\" TEXT," + // 19: REPOID
                "\"IDTODAY\" INTEGER NOT NULL );"); // 20: IDTODAY
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_INFO_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonInfoModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSignInImage());
        stmt.bindLong(2, entity.getIDImage());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(4, ID);
        }
 
        String EMPLOYEEID = entity.getEMPLOYEEID();
        if (EMPLOYEEID != null) {
            stmt.bindString(5, EMPLOYEEID);
        }
        stmt.bindDouble(6, entity.getSIMILARITY());
 
        String ENTRYTIME = entity.getENTRYTIME();
        if (ENTRYTIME != null) {
            stmt.bindString(7, ENTRYTIME);
        }
 
        String DEVICENAME = entity.getDEVICENAME();
        if (DEVICENAME != null) {
            stmt.bindString(8, DEVICENAME);
        }
 
        String DEVICEID = entity.getDEVICEID();
        if (DEVICEID != null) {
            stmt.bindString(9, DEVICEID);
        }
 
        String CREATETIME = entity.getCREATETIME();
        if (CREATETIME != null) {
            stmt.bindString(10, CREATETIME);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(11, NAME);
        }
 
        String SEX = entity.getSEX();
        if (SEX != null) {
            stmt.bindString(12, SEX);
        }
 
        String BIRTHDAY = entity.getBIRTHDAY();
        if (BIRTHDAY != null) {
            stmt.bindString(13, BIRTHDAY);
        }
 
        String NATION = entity.getNATION();
        if (NATION != null) {
            stmt.bindString(14, NATION);
        }
 
        String DEPARTMENT = entity.getDEPARTMENT();
        if (DEPARTMENT != null) {
            stmt.bindString(15, DEPARTMENT);
        }
 
        String ZFSPATH = entity.getZFSPATH();
        if (ZFSPATH != null) {
            stmt.bindString(16, ZFSPATH);
        }
 
        String ZFSFACEPATH = entity.getZFSFACEPATH();
        if (ZFSFACEPATH != null) {
            stmt.bindString(17, ZFSFACEPATH);
        }
 
        String NOTE = entity.getNOTE();
        if (NOTE != null) {
            stmt.bindString(18, NOTE);
        }
 
        String DUBIOUS = entity.getDUBIOUS();
        if (DUBIOUS != null) {
            stmt.bindString(19, DUBIOUS);
        }
 
        String REPOID = entity.getREPOID();
        if (REPOID != null) {
            stmt.bindString(20, REPOID);
        }
        stmt.bindLong(21, entity.getIDTODAY() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonInfoModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSignInImage());
        stmt.bindLong(2, entity.getIDImage());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(4, ID);
        }
 
        String EMPLOYEEID = entity.getEMPLOYEEID();
        if (EMPLOYEEID != null) {
            stmt.bindString(5, EMPLOYEEID);
        }
        stmt.bindDouble(6, entity.getSIMILARITY());
 
        String ENTRYTIME = entity.getENTRYTIME();
        if (ENTRYTIME != null) {
            stmt.bindString(7, ENTRYTIME);
        }
 
        String DEVICENAME = entity.getDEVICENAME();
        if (DEVICENAME != null) {
            stmt.bindString(8, DEVICENAME);
        }
 
        String DEVICEID = entity.getDEVICEID();
        if (DEVICEID != null) {
            stmt.bindString(9, DEVICEID);
        }
 
        String CREATETIME = entity.getCREATETIME();
        if (CREATETIME != null) {
            stmt.bindString(10, CREATETIME);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(11, NAME);
        }
 
        String SEX = entity.getSEX();
        if (SEX != null) {
            stmt.bindString(12, SEX);
        }
 
        String BIRTHDAY = entity.getBIRTHDAY();
        if (BIRTHDAY != null) {
            stmt.bindString(13, BIRTHDAY);
        }
 
        String NATION = entity.getNATION();
        if (NATION != null) {
            stmt.bindString(14, NATION);
        }
 
        String DEPARTMENT = entity.getDEPARTMENT();
        if (DEPARTMENT != null) {
            stmt.bindString(15, DEPARTMENT);
        }
 
        String ZFSPATH = entity.getZFSPATH();
        if (ZFSPATH != null) {
            stmt.bindString(16, ZFSPATH);
        }
 
        String ZFSFACEPATH = entity.getZFSFACEPATH();
        if (ZFSFACEPATH != null) {
            stmt.bindString(17, ZFSFACEPATH);
        }
 
        String NOTE = entity.getNOTE();
        if (NOTE != null) {
            stmt.bindString(18, NOTE);
        }
 
        String DUBIOUS = entity.getDUBIOUS();
        if (DUBIOUS != null) {
            stmt.bindString(19, DUBIOUS);
        }
 
        String REPOID = entity.getREPOID();
        if (REPOID != null) {
            stmt.bindString(20, REPOID);
        }
        stmt.bindLong(21, entity.getIDTODAY() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PersonInfoModel readEntity(Cursor cursor, int offset) {
        PersonInfoModel entity = new PersonInfoModel( //
            cursor.getInt(offset + 0), // signInImage
            cursor.getInt(offset + 1), // IDImage
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // EMPLOYEEID
            cursor.getFloat(offset + 5), // SIMILARITY
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ENTRYTIME
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // DEVICENAME
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // DEVICEID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CREATETIME
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // NAME
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // SEX
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // BIRTHDAY
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // NATION
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // DEPARTMENT
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ZFSPATH
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ZFSFACEPATH
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // NOTE
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // DUBIOUS
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // REPOID
            cursor.getShort(offset + 20) != 0 // IDTODAY
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonInfoModel entity, int offset) {
        entity.setSignInImage(cursor.getInt(offset + 0));
        entity.setIDImage(cursor.getInt(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEMPLOYEEID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSIMILARITY(cursor.getFloat(offset + 5));
        entity.setENTRYTIME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDEVICENAME(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDEVICEID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCREATETIME(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNAME(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSEX(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBIRTHDAY(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNATION(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDEPARTMENT(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setZFSPATH(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setZFSFACEPATH(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setNOTE(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDUBIOUS(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setREPOID(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIDTODAY(cursor.getShort(offset + 20) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PersonInfoModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PersonInfoModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(PersonInfoModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
